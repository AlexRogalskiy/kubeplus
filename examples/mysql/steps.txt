MySQL Operator
---------------

In this example we will deploy Oracle MySQL Operator (https://github.com/oracle/mysql-operator).


Setup:
-------
- Download Minikube, download Helm
  - The example has been tested on minikube-0.25 and minikube-0.28


Steps:
-------

1) minikube start --memory 4096

2) git clone https://github.com/cloud-ark/kubeplus.git

3) cd kubeplus

4) Wait till Helm Pod is running
   - kubectl get pods -n kube-system

5) Once Helm Pod is ready, deploy Kubeplus
   - kubectl apply -f deploy/

6) Wait till kubeplus is ready (4/4 Ready containers)
   - kubectl get pods

7) cd examples/mysql

8) Deploy MySQL Operator
   - kubectl create -f mysql-operator.yaml

9) Wait till MySQL Operator Pod is ready. This Operator is deployed in namespace 'mysql-operator'
    - kubectl get ns
    - kubectl get pods -n mysql-operator

10) Find information about various Custom Kinds registered by Oracle MySQL Operator
    - kubectl get operators
    - kubectl describe operators mysql-operator-0.2.1
    - kubectl describe customresourcedefinition mysqlclusters.mysql.oracle.com
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Cluster" | python -m json.tool
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Cluster.ClusterSpec" | python -m json.tool
    - kubectl describe operators mysql-operator-0.2.1
    - kubectl describe customresourcedefinition mysqlbackups.mysql.oracle.com
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Backup" | python -m json.tool
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Backup.BackupSpec" | python -m json.tool
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Backup.BackupSpec.StorageProvider" | python -m json.tool
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Backup.BackupSpec.StorageProvider.S3StorageProvider" | python -m json.tool
    - kubectl describe operators mysql-operator-0.2.1
    - kubectl describe customresourcedefinition mysqlrestores.mysql.oracle.com
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Restore" | python -m json.tool
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Restore.RestoreSpec" | python -m json.tool
    - kubectl describe operators mysql-operator-0.2.1
    - kubectl describe customresourcedefinition mysqlbackupschedules.mysql.oracle.com
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=BackupSchedule" | python -m json.tool
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=BackupSchedule.BackupScheduleSpec" | python -m json.tool


11) Verify MySQL cluster
    - Wait till MySQL Pods are running 
      - kubectl get pods (there should be three pods mysql-0, mysql-1, mysql-2)

    - Retrieve password to connect to the cluster
      - kubectl -n default get mysqlclusters
      - kubectl -n default get secret mysql-root-password -o jsonpath="{.data.password}" | base64 --decode

    - Connect to the cluster
      - kubectl run mysql-client --image=mysql:5.7 -it --rm --restart=Never \
        > -- mysql -h mysql -uroot -p<password-from-previous-step-output> -e 'SELECT 1'

Troubleshooting
----------------

1) Get KubePlus logs
   - kubectl get pod <kubeplus-pod> -c operator-manager
   - kubectl get pod <kubeplus-pod> -c operator-deployer
   - kubectl get pod <kubeplus-pod> -c kube-discovery-apiserver

2) Check Helm Deployments
   - helm list --tiller-namespace default

