Compose Platform Workflows as Kubernetes APIs
----------------------------------------------

Setup:
------
- Create a GKE cluster
- Create a GCE Persistent Disk named my-data-disk
  - Note: create the disk in the same zone as your cluster
  - gcloud compute disks create --size=10GB --zone=us-central1-b my-data-disk
- Install Docker on your machine
- Install Helmv3
- Install MysqlCluster Operator on the cluster
  - helm install mysqloperator https://github.com/cloud-ark/operatorcharts/blob/master/mysql-operator-0.2.5-6.tgz?raw=true


- git clone https://github.com/cloud-ark/kubeplus
- Install KubePlus client-side kubectl plugins
  - export KUBEPLUS_HOME=`pwd`
  - export PATH=$KUBEPLUS_HOME/plugins/:$PATH
- Install KubePlus server-side component
  - cd deploy/
  - ./deploy-kubeplus.sh

Create a Kubernetes API to encapsulate Platform workflow (done by Platform Engineering team):
------------------------------------------------------------------------------------
1. more mysqlserviceapi.yaml
   -> Check new resource definition
   -> Check ResourcePolicy definition
   -> Check ResourceMonitor definition
2. Verify that the API does not exist
   - kubectl get crds | grep "mysqlservices.platformapi.kubeplus"
3. Create the API
   - kubectl create -f mysqlserviceapi.yaml
4. Verify that the API has been created
  - kubectl get crds | grep "mysqlservices.platformapi.kubeplus"


Instantiate Platform workflow using the new API (done by Product team):
------------------------------------------------------------------------
1. Check man page for MysqlService
   - kubectl man MysqlService

2. Create MysqlService instance:
   - more myservice1.yaml
   - Add the name of the worker Node on which you want to deploy MysqlCluster instance
     in myservice1.yaml
   - kubectl create -f myservice1.yaml
   - Check mysqlservice instance has been created
     - kubectl get mysqlservices
   - Check Mysql Pods are created
     - kubectl get pods (Wait till both Pods are running)
       - Pod names:
         - mysqlservice-service1-mysql-0
         - mysqlservice-service1-mysql-1

5. Check connectivity graph:
   - kubectl connections MysqlService service1 default -o png --ignore=ServiceAccount:default,Namespace:default

6. Verify Policy application:
   - kubectl get pods mysqlservice-service1-mysql-0 -o json | jq -r '.spec.containers[0].resources'
   - kubectl get pods mysqlservice-service1-mysql-1 -o json | jq -r '.spec.containers[0].resources'

7. Get Metrics. There are two ways to get the metrics:
   - Using kubectl proxy:
     - Open a terminal and start kubect proxy:
       - kubectl port-forward  kubeplus -n default 8081:8090
       - curl -kv "http://127.0.0.1:8081/apis/kubeplus/metrics?kind=MysqlService&instance=service1&namespace=default"
   - Querying API server directly
     - MASTER_IP=Get IP Address of the cluster API server
       - export MASTER_IP=34.121.16.241 (this is just an example)
     - NODEPORT=`kubectl get svc | grep kubeplus | awk '{print $5}' | cut -d ':' -f 2 | cut -d '/' -f 1`
     - curl -kv "http://$MASTER_IP:$NODEPORT/apis/kubeplus/metrics?kind=MysqlService&instance=service1&namespace=default"

   - Verify that following metrics are output (actual values will be different for your setup):
      cpu{custom_resource="service1"} 18 1613666185165
      memory{custom_resource="service1"} 281 1613666185165
      storage{custom_resource="service1"} 8 1613666185165
      pods{custom_resource="service1"} 2 1613666185165
      containers{custom_resource="service1"} 12 1613666185165
      network_receive_bytes_total{custom_resource="service1"} 4657685.0 1613666185165
      network_transmit_bytes_total{custom_resource="service1"} 14398706.0 1613666185165

Demo Clean up:
--------------
1. kubectl delete -f myservice1.yaml
2. Verify
   - kubectl get mysqlservices
     - Verify that service1 instances is gone
   - kubectl get pods (Mysql Pods should have been deleted)
3. kubectl delete -f mysqlserviceapi.yaml
4. Verify
   - kubectl get crds | grep "mysqlservices.platformapi.kubeplus" (Should return empty)
