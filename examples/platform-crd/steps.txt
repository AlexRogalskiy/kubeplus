PlatformStack Usage 
--------------------

This example demonstrates how KubePlus enforces ordering between Custom Resources.

PlatformStack Custom Resource is used to define the structure of a Platform Stack. A Platform Stack consists
of Kubernetes Custom Resources with a common label. Make sure to label individual resources with the label that you use in Platform Stack labelSelector. 

Setup:
-------
- Download Minikube (v1.1.1), download Helm (v2.14.0)

Steps:
-------

1) Create Kubernetes Cluster
   - minikube start --memory 4096
   - (Experimental) If working with Managed/Hosted Kubernetes cluster (such as DigitalOcean), 
     create a single node cluster, download the cluster config file and save it in 
     your ~/.kube directory with the name 'config' (e.g.: ~/.kube/config)

2) Install KubePlus
   - git clone https://github.com/cloud-ark/kubeplus.git
   - cd kubeplus
   - ./deploy-kubeplus.sh

3) Wait till Tiller Pod is running
   - kubectl get pods -n kube-system

4) Once Helm Pod is ready, deploy Moodle and MySQL Operators
   - helm install https://github.com/cloud-ark/operatorcharts/blob/master/mysql-operator-0.2.5-3.tgz?raw=true
   - helm install https://github.com/cloud-ark/operatorcharts/blob/master/moodle-operator-chart-0.4.4.tgz?raw=true

5) Wait till both Operator Pods are ready
   - kubectl get pods

6) Find available Custom Resources
   - kubectl get customresourcedefinitions

7) Find the Custom Resource Kind names
   - kubectl describe customresourcedefinitions mysqlclusters.mysql.presslabs.org
   - kubectl describe customresourcedefinitions moodles.moodlecontroller.kubeplus

8) Find more information like how-to use, Spec properties, etc. for each Kind
   - kubectl man MysqlCluster
   - kubectl man Moodle

9) Deploy Moodle Platform Stack
   
   - cd moodle-mysql

   - Create PlatformStack definition
     - kubectl create -f platform.yaml

   - Test out-of-order resource creation
     - kubectl create -f moodle1.yaml
     - kubectl create -f cluster1.yaml

   - Create MysqlCluster Custom Resource instance
     - kubectl create -f cluster1-secret.yaml
     - kubectl create -f cluster1.yaml

   - Wait till MysqlCluster pods are ready
     - kubectl get pods

   - Once MysqlCluster pods are ready, deploy Moodle
     - kubectl create -f moodle1.yaml
  
   - Wail till Moodle Pod is ready (It will take about 5/6 minutes for Moodle Pod to become ready)
     - kubectl get pods

   - Login to Moodle Instance
       - Update /etc/hosts with <minikube ip or cluster node ip> moodle1. Example:
         - 192.168.99.100 moodle1
         - You can find minikube ip using: "minikube ip" command
         - If using Managed Kubernetes, find out the cluster node ip by refering to appropriate documentation
           from the provider.
         - Retrieve Moodle instance's admin password
	   - kubectl describe moodles moodle1 -n namespace1
             - Note down the secret name and Moodle instance URL
         - kubectl get secret moodle1 -n namespace1 -o jsonpath="{.data.adminPassword}" | base64 --decode
         - Navigate to the URL of moodle1 instance (available in the output of 'describe' command)
           - Login using 'admin' as username and password retrieved earlier from 'kubectl get secret' command
    - Check installed plugins
      - As part of creating moodle instance, we install the 'profilecohort' plugin.
        Check the custom resource specification moodle1.yaml to see this definition.
        - Once logged in to the Moodle instance, hit 'Site Administration'. 
          This will show a message to update Moodle database for 'profilecohort' plugin.
        - Select that option to complete Plugin installation. 
          You should see a 'success' message when the plugin is installed.
        - Hit the 'contine' button. This will take you to the main screen. 
          Fill out the profile and then hit 'update profile'.
        - Then 
          - Navigate to -> Administration -> Plugins -> Plugins Overview
          - You should see 'profilecohort' plugin in the 'Additional plugins' list

10) Check the composition of Moodle instance
    - kubectl get composition Moodle moodle1 default

11) Check the composition of MysqlCluster instance
    - kubectl get composition MysqlCluster cluster1 default



Troubleshooting
----------------

1) Check Helm Deployments
   - helm list

2) Get Moodle Operator logs
   - kubectl logs <moodle-operator-pod>

3) Get KubePlus logs
   - kubectl get pods
   - kubectl logs <kubeplus-apiserver-pod>
   - kubectl logs <kubeplus-mutating-webhook-pod>
