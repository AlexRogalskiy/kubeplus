#helm init
#kubectl apply -f kubeplus/deploy/

Download minikube-0.25

1) minikube start --memory 4096

2) helm init

3) git clone https://github.com/cloud-ark/kubeplus.git

4) cd kubeplus

5) Wait till Helm Pod is running

   - kubectl get pods -n kube-system

6) Once Helm Pod is ready, deploy Kubeplus

   - kubectl apply -f deploy/

7) Wail till kubeplus is ready (4/4 Ready containers)
  
   - kubectl get pods

8) Update moodle-operator.yaml with minikube ip

   - minikube ip

   - vi moodle-operator.yaml --> set HOST_IP to value of minikube ip

9) Deploy Moodle Operator

   - kubectl create -f moodle-operator.yaml

10) Wait till Moodle Operator pod is ready

   - kubectl get pods

11) Deploy Moodle1 instance
    - kubectl create -f examples/moodle/moodle1-mysql.yaml
    - kubectl get pods (Wait will mysql pod is ready)
    - kubectl create -f examples/moodle/moodle1.yaml
    - kubectl get pods (It will take about 5/6 minutes for Moodle Pod to become ready)
    - Once Moodle Pod is ready, 
      - kubectl describe moodles moodle1
      - Navigate to the IP URL of moodle1 instance
        - Login using 'admin' and 'password1' as login credentials

12) Deploy Moodle2 instance
    - kubectl create -f examples/moodle/moodle2-mysql.yaml
    - kubectl get pods (Wait will mysql pod is ready)
    - kubectl create -f examples/moodle/moodle2.yaml
    - kubectl get pods (It will take about 5/6 minutes for Moodle Pod to become ready)
    - Once Moodle Pod is ready, 
      - kubectl describe moodles moodle2
      - Navigate to the IP URL of moodle2 instance
        - Login using 'admin' and 'password1' as login credentials



----------------------------------------------------------------------------------------


1) Create a AWS EC2 instance: t2.xlarge (4vCPUs, 16GB memory, 40 GB disk, Ubuntu 18.04)

2) Update the security group to allow traffic on port 80 from 0.0.0.0/0

3) Login

4) Switch user to root:

   ``sudo su -``

5) git clone https://github.com/cloud-ark/kubeplus.git

6) cd kubeplus

7) ./setup-test-cluster.sh

8) cd $HOME/goworkspace/src/k8s.io/kubernetes

9) Edit hack/local-up-cluster.sh to include following:

   - NODE_PORT_RANGE:"1-32000"

   - ENABLE_HOSTPATH_PROVISIONER: "true"

10) Start cluster

   - export PATH=$PATH:/usr/local/go/bin

   - export KUBERNETES_PROVIDER=local 

   - nohup hack/local-up-cluster.sh &

11) Start Helm

    - export PATH=$PATH:$HOME/goworkspace/src/k8s.io/kubernetes/cluster

    - pushd ~/kubeplus

    - ./setup-helm.sh

12) Deploy Kubeplus

    - kubectl.sh apply -f deploy

    - kubectl.sh get pods (wait till all KubePlus containers are READY)


13) Update moodle-operator.yaml with value of HOST_IP (public IP). Then,
- kubectl.sh create -f moodle-operator.yaml
- kubectl.sh get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Moodle" | python -m json.tool
- kubectl.sh create -f moodle-mysql.yaml
- kubectl.sh get pods

14) Once MySQL Pod is running and READY (1/1),
- kubectl.sh create -f moodle1.yaml
- kubectl.sh get pods

It may take about 5/6 minutes for Moodle Pod to become ready.

15) Once Moodle Pod is ready,
- kubectl.sh describe moodle moodle1

Moodle instance status will contain IP address.
Open it in browser. If the deployment is successful
you should see Moodle login page.
Login using username 'admin' and password defined in moodle1.yaml
Then,

16) Check Moodle composition tree

- kubectl.sh get --raw "/apis/kubeplus.cloudark.io/v1/composition?kind=Moodle&instance=moodle1" | python -m json.tool

