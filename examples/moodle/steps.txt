Moodle Operator
---------------

Moodle is an open source e-learning platform (https://moodle.org/).

In this example we will deploy Moodle platform on Kubernetes. 
We will use a Moodle Operator to create Moodle platform instances as code.
Moodle supports various plugins. Moodle Operator takes the list of plugins to be installed 
as declarative input in the Moodle Custom Resource Spec. The Operator installs the plugins at appropriate
location within the Moodle installation. Check moodle1.yaml to see an example of how
plugins are specified in the Custom Resource Spec. Check update-moodle1.yaml to see
an example of how to specify installation of additional plugins on an existing Moodle instance.

Setup:
-------
- Download Minikube, download Helm
  - The example has been tested on minikube-0.25, minikube-0.28, minikube-0.30 and helm version 2.11.0

Steps:
-------

1) minikube start --memory 4096

2) helm init

3) git clone https://github.com/cloud-ark/kubeplus.git

4) cd kubeplus

5) Wait till Tiller Pod is running
   - kubectl get pods -n kube-system

6) Once Helm Pod is ready, deploy Kubeplus
   - kubectl apply -f deploy/

7) Wait till kubeplus is ready (4/4 Ready containers)
   - kubectl get pods

8) cd examples/moodle

9) Deploy Moodle Operator
   - kubectl create -f moodle-operator.yaml

10) Wait till Moodle Operator pod is ready
   - kubectl get pods

11) Find information about Moodle Custom Kind registered by Moodle Operator
    - kubectl get operators
    - kubectl describe operators moodle-operator
    - kubectl describe customresourcedefinition moodles.moodlecontroller.kubeplus
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Moodle" | python -m json.tool
      --> You should see OpenAPI Spec for Moodle custom kind as output
    - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/explain?kind=Moodle.MoodleSpec" | python -m json.tool

12) Deploy Moodle1 instance
    - First deploy MySQL as database for the Moodle instance
      - kubectl create -f moodle1-mysql.yaml
      - kubectl get pods (Wait will mysql pod is ready)
    - Next create Moodle instance
      - kubectl create -f moodle1.yaml
      - kubectl get pods (It will take about 5/6 minutes for Moodle Pod to become ready)
    - Once Moodle Pod is ready, login to the Moodle instance
      - Update /etc/hosts with <minikube-ip> moodle1. Example:
        - 192.168.99.100 moodle1
        - You can find minikube ip using: "minikube ip" command
      - Retrieve Moodle instance's admin password
	- kubectl describe moodles moodle1
        - kubectl get secret moodle1 -o jsonpath="{.data.adminPassword}" | base64 --decode
          - Secret name is available in the output of 'describe' command
      - Navigate to the URL of moodle1 instance (available in the output of 'describe' command)
        - Login using 'admin' as username and password retrieved earlier from secret
    - Check installed plugins
      - As part of creating moodle instance, we install the 'profilecohort' plugin.
        Check the custom resource specification moodle1.yaml to see this definition.
        - Once logged in to the Moodle instance you will see a message to update Moodle database 
          for 'profilecohort' plugin.
        - Select that option to complete Plugin installation
        - Navigate to -> Administration -> Plugins -> Plugins Overview
        - You should see 'profilecohort' plugin in the 'Additional plugins' list

    - Find composition tree of Moodle1 instance
      - kubectl get --raw "/apis/kubeplus.cloudark.io/v1/composition?kind=Moodle&instance=moodle1" | python -m json.tool


13) Update Moodle Deployment to install new Plugin
    - We will install 'wiris' plugin on 'moodle1' Moodle instance
    - kubectl apply -f update-moodle1.yaml

    - Wait for Moodle instance to become Ready
      - kubectl describe moodle moodle1
      - Once moodle1 instance is Ready, refresh the URL in the browser

    - You will see a message to update Moodle database for 'wiris' plugin
    - Select that option to complete Plugin installation
      - Navigate to -> Administration -> Plugins -> Plugins Overview
      - You should see 'profilecohort' and 'wiris' plugins in the 'Additional plugins' list

14) Deploy Moodle2 instance
    - kubectl create -f moodle2-mysql.yaml
    - kubectl get pods (Wait will MySQL Pod is ready)
    - kubectl create -f moodle2.yaml
    - kubectl get pods (It will take about 5/6 minutes for Moodle Pod to become ready)
    - Once Moodle Pod is ready, 
      - kubectl describe moodles moodle2
    - Login to Moodle Instance
      - Update /etc/hosts with <minikube-ip> moodle2. Example:
        - 192.168.99.100 moodle2
        - You can find minikube ip using: "minikube ip" command
    - Check Moodle2 instance
      - kubectl describe moodle moodle2
        - The URL of Moodle instance should be available from Status field from output of above command
        - Open the URL in the browser
          - Login using 'admin' as username and retrieve password from moodle2 secret as described 
            in step 12.


Troubleshooting
----------------

1) Get KubePlus logs
   - kubectl get pod <kubeplus-pod> -c operator-manager
   - kubectl get pod <kubeplus-pod> -c operator-deployer
   - kubectl get pod <kubeplus-pod> -c kube-discovery-apiserver

2) Check Helm Deployments
   - helm list
