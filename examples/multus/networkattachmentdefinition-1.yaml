apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: network-attachment-definitions.k8s.cni.cncf.io
  annotations:
    resource/annotation-relationship: "on:Pod,key:k8s.v1.cni.cncf.io/networks,value:[{name:INSTANCE.metadata.name}]"
    resource/usage: network-attachment-definition-usage.usage
spec:
  group: k8s.cni.cncf.io
  version: v1
  scope: Namespaced
  names:
    plural: network-attachment-definitions
    singular: network-attachment-definition
    kind: NetworkAttachmentDefinition
    shortNames:
    - net-attach-def
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            config:
                 type: string
---
kind: ConfigMap 
apiVersion: v1 
metadata:
  name: network-attachment-definition-usage
data:
  usage: |
    Multus CNI is a container network interface (CNI) plugin for Kubernetes that enables attaching multiple network interfaces to pods. Typically, in Kubernetes each pod only has one network interface (apart from a loopback) -- with Multus you can create a multi-homed pod that has multiple interfaces. This is accomplished by Multus acting as a "meta-plugin", a CNI plugin that can call multiple other CNI plugins. Multus CNI follows the Kubernetes Network Custom Resource Definition De-facto Standard to provide a standardized method by which to specify the configurations for additional network interfaces. 

    In order to create multiple interfaces for a Pod, follow these steps:
    1. Create an instance of NetworkAttachmentDefinition with the required CNI configurations for interfaces.
    2. Create a Pod with special annotations field called "k8s.v1.cni.cncf.io/networks". 
       This field takes a comma delimited list of the names of your NetworkAttachmentDefinitions. Specify
       the name of NetworkAttachmentDefinition instance created in step 1.
    3. Verify that the Pod has received multiple interfaces:
       - kubectl exec -it <pod-name> -- ip a
