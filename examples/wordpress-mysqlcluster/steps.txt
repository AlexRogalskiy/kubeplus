Wordpress with MysqlCluster Operator 
-------------------------------------

Steps:
-------

1) Create Kubernetes Cluster
   - Minikube
     - Download Minikube (latest), download Helm (latest)
     - minikube start --memory 4096
  - GKE
     - Create a GKE cluster with 4vCPUs and 15.00 GB memory minimum

2) Setup Helm
   - kubectl create -f scripts/helm-rbac-config.yaml
   - helm init --service-account tiller

3) Wait till Tiller Pod is running
   - kubectl get pods -n kube-system

4) Once Helm Pod is ready, deploy MySQL Operator and apply Cert-Manager CRDs
   - helm install https://github.com/cloud-ark/operatorcharts/blob/master/mysql-operator-0.2.5-4.tgz?raw=true
   - kubectl create -f cert-manager-crds-release0.8.yaml

5) Wait till MysqlCluster Operator Pod is ready
   - kubectl get pods

6) Find available Custom Resources
   - kubectl get customresourcedefinitions

7) Find the Custom Resource Kind names
   - kubectl describe customresourcedefinitions mysqlclusters.mysql.presslabs.org
  
8) Find more information like how-to use, Spec properties, etc. for each Kind
   - kubectl man MysqlCluster

9) Deploy Wordpress in namespace1
   - kubectl create ns namespace1
   
   - Create MysqlCluster Custom Resource instance
     - kubectl create -f cluster1-secret.yaml
     - kubectl create -f cluster1.yaml

   - Wait till MysqlCluster pods are ready
     - kubectl get pods -n namespace1

   - Once MysqlCluster pods are ready, deploy Wordpress

     - Find the name of the MysqlCluster 'master' Service corresponding to the cluster1 MysqlCluster.
       - kubectl composition MysqlCluster cluster1 namespace1 | python -m json.tool

     - Add that in wordpress-pod.yaml environment variable WORDPRESS_DB_HOST
     - Base64 decode the value of cluster1-secret and add that value to WORDPRESS_DB_PASSWORD environment variable 

     - kubectl create -f wordpress-pod.yaml
     - kubectl create -f wordpress-service.yaml
     - kubectl create -f wordpress-ingress.yaml
     - kubectl create -f clusterissuer.yaml

10) Check the connections
    - kubectl connections MysqlCluster cluster1 namespace1
    - kubectl connections Service wordpress namespace1
    - kubectl connections <Pod-name> namespace1

11) Cleanup
     - kubectl delete -f wordpress-pod.yaml
     - kubectl delete -f wordpress-service.yaml
     - kubectl delete -f wordpress-ingress.yaml
     - kubectl delete -f clusterissuer.yaml
     - kubectl delete -f cluster1-secret.yaml
     - kubectl delete -f cluster1.yaml



