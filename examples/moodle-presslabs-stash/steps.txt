Deploy, Backup, Restore Moodle instance
----------------------------------------

In the following steps we first create a Moodle instance, populate it with some data, take its back up,
and then restore it. Moodle uses both relational database and file system for storage.
We use three Operators in this example:
- Moodle Operator from CloudARK
- MySQL Operator from PressLabs
- Stash Operator from Appscode
- Nginx Controller (if on GKE)

MySQL Operator has the capability to perform database backup and restore.
Stash Operator has the capability to perform Volume backups and restore.
Backups are stored in S3. 

Follow these steps to test this example:

Setup:
-----

1) Install aws-cli, enter your access-keys
    - curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
    - unzip awscli-bundle.zip
    - sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
    - aws configure

2) Make an s3 bucket. Chose a unique name for the bucket. In this example we have
   chosen the bucket name as 'stash-testing34'
    - aws s3 mb s3://stash-testing34
   You will need to use this bucket name in following files:
   - moodle-backup/cluster1.yaml, moodle-backup/restic-moodle.yaml
   - moodle-recovery/cluster2-recovered.yaml

3) Create a Kubernetes cluster from a Managed Service Provider such as GKE.
   - GKE cluster size: 4vCPUs and 15.00 GB memory minimum

4) Install Helm v3

5) Install KubePlus 


Install operators
------------------

1) Install presslabs-mysql-operator, moodle operator and stash operator

   - helm install https://github.com/cloud-ark/operatorcharts/blob/master/mysql-operator-0.2.5-6.tgz?raw=true
   - helm install https://github.com/cloud-ark/operatorcharts/blob/master/moodle-operator-chart-0.5.1.tgz?raw=true
   - helm install https://github.com/cloud-ark/operatorcharts/blob/master/stash-operator-chart-0.8.6.tgz?raw=true
   - Install Nginx Ingress Controller
     - helm install stable/nginx-ingress --name nginx


Create Moodle instance and take its backups
--------------------------------------------

0) Change directory
    - cd examples/moodle-presslabs-stash

1) Deploy Moodle Platform Stack in namespace1
   - cd moodle-backup
   - kubectl create ns namespace1

   - Create MysqlCluster Custom Resource instance.
     - Find how to use MysqlCluster Custom Resource
       - kubectl man MysqlCluster

     We are also going to configure periodic backups for this Cluster as part of the Spec definition.
     Setting up a MysqlCluster involves three things:
     a. Creating a Secret that represents MysqlCluster's root user password
       - kubectl create -f cluster1-secret.yaml
     b. Creating a Secret that is used for representing AWS credentials
       - Create base64 encoded values of your aws_access_key_id and aws_secret_access_key
         from ~/.aws/credentials
         - for AWS_ACCESS_KEY_ID:
           - echo -n "aws_access_key_id" | base64
         - for AWS_SECRET_ACCESS_KEY:
           - echo -n "aws_secret_access_key" | base64 
       - kubectl create -f backups-aws-secret.yaml
     c. Referencing above two Secret objects in the MysqlCluster Spec definition.
       - Make sure the names of above two Secrets are referenced in MysqlCluster Spec.
         The Secret for root user password is referenced in the Spec property: secretName
         The Secret for AWS is referenced in the Spec property: backupSecretName
     d. Add the Bucket name in Spec property: backupURL
     e. Create MysqlCluster instance
        - kubectl create -f cluster1.yaml

   - Wait until MysqlCluster pod is Ready - 4/4
     - kubectl get pods -n namespace1

   - Once MysqlCluster pods are ready, deploy Moodle

     - Find how to use Moodle Custom Resource
       - kubectl man Moodle

     - In the Moodle Spec you need to reference the MysqlCluster endpoints so that Moodle can
       use the MysqlCluster. The relevant Spec properties are: mysqlSQLServiceName, mysqlUserName, mysqlUserPassword. 
       The value of mysqlServiceName should be name of the MysqlCluster resource with '-mysql-master' appended to it. 
       The value of mysqlUserName should be 'root'. 
       The value of mysqlUserPassword should be name of the MysqlCluster's root user password with the key of the data appended to it. 
       All these values are already populated in moodle1.yaml. If you change the names of MysqlCluster resource or the corresponding Secret object for the username, then make sure to update moodle1.yaml.

     - GKE:
       - Register a DomainName with some DNS provider like AWS Route53.
         Update moodle1-gke.yaml to include 'domainName' attribute, e.g.: 'domainName: www.moodle1.net'.

     - Find the name of the MysqlCluster 'master' Service corresponding to the cluster1 MysqlCluster.
       - kubectl connections  MysqlCluster cluster1 namespace1

     - Add that name in moodle1.yaml / moodle1-gke.yaml in Spec.mySQLServiceName field

     - Create Moodle instance
       - Minikube
         - kubectl create -f moodle1.yaml
       - GKE
         - kubectl create -f moodle1-gke.yaml

     - Wait till Moodle Pod is ready 1/1 (It will take about 5/6 minutes for Moodle Pod to become ready)
       - kubectl get pods -n namespace1

   - Login to Moodle Instance
        - GKE
          - Get the IP address of the Nginx Ingress controller and add it to the DNS as a 'A record' set
            - kubectl get svc
              - Get EXTERNAL-IP of the nginx-ingress-controller and add it as 'A record' to the DNS.
          - Navigate to the domain name url. Note that this will be a 'http' url. If your browser auto-changes
            the url to 'https', delete browser cookies so that you will be able to navigate to 'http' url.

        - Retrieve Moodle instance's admin password. The Moodle Operator creates a password and stores that in a Secret Object.
	       - kubectl describe moodles moodle1 -n namespace1
             - Note down name of the Secret object and Moodle instance URL
           - kubectl get secret moodle1 -n namespace1 -o jsonpath="{.data.adminPassword}" | base64 --decode
         - Navigate to the URL of moodle1 instance (available in the output of 'describe' command)
           - Login using 'admin' as username and password retrieved earlier from 'kubectl get secret' command
    - Check installed plugins
      - As part of creating moodle instance, we install the 'profilecohort' plugin.
        Check the custom resource specification moodle1.yaml to see this definition.
        - Once logged in to the Moodle instance, hit 'Site Administration'.
          This will show a message to update Moodle database for 'profilecohort' plugin.
        - Select that option to complete Plugin installation.
          You should see a 'success' message when the plugin is installed.
        - Hit the 'contine' button. This will take you to the main screen.
          Fill out the profile and then hit 'update profile'.
        - Then
          - Navigate to -> Administration -> Plugins -> Plugins Overview
          - You should see 'profilecohort' plugin in the 'Additional plugins' list
    - Create a new course
        - Go to Site home
        - Add a new course
        - Fill in the fields and
            Upload an image > Upload a file
        - Save and return

2) In order to take Volume backup we are going to use Custom Resources from the Stash Operator.
   Stash Operator defines the 'Restic' Custom Resource for this purpose.
   Find out how to use the Restic Custom Resource:
   - kubectl man Restic

   - Restic Custom Resource needs two things as input. First, the mount path of the Volume that needs to be backed up. 
   Second, the Deployment in which the Volume is mounted needs to be given some label and that label needs to be specified in the Restic Custom Resource's selector.

   - Use the 'man' endpoint for Moodle Kind to find the Volume mount path that the Moodle Operator uses for the Moodle data volume.
    - kubectl man Moodle

   - Use 'connection' for moodle1 instance to find the name of the Deployment object that is created as part of creating moodle1 Custom Resource instance.
    - kubectl connection Moodle moodle1 namespace1

3) Add a label to the Moodle deployment
    - kubectl label -n namespace1 deployments moodle1 app=moodle-deploy

4) Update the restic-moodle.yaml with the Volume mount path from step 2 and the label added in step 3
   (lines 9, 11, 21 in restic-moodle.yaml)

5) Add base64 encoded values of AWS access key and access key id to s3-secret.yaml

    for AWS_ACCESS_KEY_ID:
    - echo -n "aws_access_key_id" | base64
    for AWS_SECRET_ACCESS_KEY:
    - echo -n "aws_secret_access_key" | base64
    for RESTIC_PASSWORD:
    - echo -n "changeit" | base64

6) Apply AWS s3 secret
    - kubectl apply -f s3-secret.yaml

7) Update restic-moodle.yaml with S3 details:
   - S3 bucket name (spec property: spec.backend.s3.bucket)
   - S3 secret name (spec property: spec.backend.storageSecretName)

8) Start taking backups
    - kubectl apply -f restic-moodle.yaml

9) Validate that Volume backups are happening (may take one minute)
    - aws s3 ls s3://stash-testing34/stash1/deployment/moodle1/

10) Validate that Database backups are happening
    - aws s3 ls s3://stash-testing34/mysql-backups/

In steps 9 and 10 make sure to use the bucket name that you created during setup.


Recover a snapshot
-------------------

1) cd ../moodle-recovery

2) We are going to use the 'Recovery' Custom Resource from Stash Operator to recover the Volume.
   - Check how to use the 'Recovery' Custom Resource
     - kubectl man Recovery
   The Stash Operator recovers the Volume in a PersistentVolumeClaim.

3) Create PersistentVolumeClaim
    - kubectl create -f pvc.yaml

4) Check available Moodle volume backups, Pick one.
    - kubectl get snapshots -n namespace1 -l repository=deployment.moodle1
      - Change recovery.yaml L10 to the snapshot you picked.
        - snapshot: deployment.moodle1-b3ae042b

5) Create the Recovery object. It stores the snapshot into that PersistentVolumeClaim.
   Update the Recovery Custom Resource definition (in recovery.yaml) with the name of the PersistentVolumeClaim that you created in step 3 (in line 16)
    - kubectl create -f recovery.yaml
    Wait until the Recovery event is successful
    - kubectl describe recovery s3-recovery-specific-snapshot -n namespace1
      -> It may take couple of minutes for this. Once you see following message
         "Recovery s3-recovery-specific-snapshot succeeded", it means recovery is complete.

6) Check available MysqlCluster backups. Pick one
    - aws s3 ls s3://stash-testing34/mysql-backups/
        Change cluster2-recovered.yaml L9 to the mysqlbackup you picked:
        - initBucketURI: s3://stash-testing34/mysql-backups/cluster1-2019-04-09T19:56:01.xbackup.gz

7) Create the new MysqlCluster from backed up data
    - kubectl create -f cluster2-secret.yaml
    - kubectl create -f cluster2-recovered.yaml

8) Wait till cluster2 comes up:
   - kubectl get pods -n namespace1

9) Recover the Moodle instance with backed up Volume. Specify the name of the PersistentVolumeClaim in the Spec property PVCVolumeName in moodle2-recovered.yaml
    - kubectl create -f moodle2-recovered-gke.yaml

10) Wait for moodle2 instance to come up:
   - kubectl describe moodles moodle2 -n namespace1

11) Access moodle2 instance
    - Follow 'Login to Moodle instance steps' described earlier. 

    - GKE
      - Visit the domain in the browser. It may take couple of minutes for Moodle instance
        to become active at the new Domain Name. 

    - Minikube:   
      - Visit moodle2:32001 (may take a few minutes)
    - Verify that all uploaded images are there!
    - Courses you added with an image should be there
    - Private files that students created should be there
    - Log in to Moodle instance and verify the installed plugins. You will need to use password of the Moodle1
      instance for logging in.
      - kubectl get secret moodle1 -n namespace1 -o jsonpath="{.data.adminPassword}" | base64 --decode


Clean up
---------
1) Remove aws bucket
    - aws s3 rb s3://stash-testing34 --force
2) Delete everything
    - cd ../
    - kubectl delete moodle moodle1 -n namespace1
    - kubectl delete moodle moodle2 -n namespace1
    - kubectl delete -f moodle-backup/restic-moodle.yaml
    - kubectl delete -f moodle-backup/cluster1.yaml
    - kubectl delete -f moodle-recovery/cluster2-recovered.yaml
    - kubectl delete -f moodle-recovery/recovery.yaml
    - kubectl delete -f moodle-recovery/pvc.yaml
    - kubectl delete namespace namespace1
    - kubectl delete mysqlbackups.mysql.presslabs.org --all -n namespace1
    - kubectl delete secrets --all -n namespace1
    - kubectl delete secrets --all -n namespace2
    - helm list
        - find name to delete mysql operator, moodle operator and stash operator
    - helm delete _some_name_sql
    - helm delete _some_name_moodle
    - helm delete _some_name_stash
    - helm delete nginx
    - cd ../../
    - kubectl delete -f deploy
