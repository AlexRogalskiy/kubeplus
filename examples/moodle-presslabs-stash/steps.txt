Setup and Deploy KubePlus
-----

0) Install aws-cli, enter your access-keys
    - curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
    - unzip awscli-bundle.zip
    - sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
    - aws configure

1) Make an s3 bucket
    - aws s3 mb s3://stash-testing34

2) Start Minikube
    - minikube start --memory 4096 --cpus=2

4) Go to KubePlus location
    - cd kubeplus

5) Deploy KubePlus pod
    - kubectl apply -f deploy/


Start helm and install operators
-----------

1) Setup
    - helm init

2) Wait till Tiller Pod is running
    - kubectl get pods -n kube-system

3) Install presslabs-mysql-operator, moodle operator and stash operator
helm install https://github.com/cloud-ark/operatorcharts/blob/master/mysql-operator-0.2.5.tgz?raw=true
helm install https://github.com/cloud-ark/operatorcharts/blob/master/moodle-operator-chart-0.3.0.tgz?raw=true
helm install https://github.com/cloud-ark/operatorcharts/blob/master/stash-operator-chart-0.8.4.tgz?raw=true

4. Find more information like how-to use, Spec properties, etc. for each Kind
    - kubectl get --raw "/apis/platform-as-code/v1/man?kind=Moodle"
    - kubectl get --raw "/apis/platform-as-code/v1/man?kind=Recovery"
    - kubectl get --raw "/apis/platform-as-code/v1/man?kind=Restic"
    - kubectl get --raw "/apis/platform-as-code/v1/explain?kind=Moodle"  | python -m json.tool
    - kubectl get --raw "/apis/platform-as-code/v1/explain?kind=Moodle.MoodleSpec"  | python -m json.tool

5) Change directory
    - cd examples/moodle-presslabs-stash

6) Check they are created
    - kubectl get pods


Create backups of Moodle
-----------
1) Deploy Moodle Platform Stack in namespace1
   - cd moodle-backup
   - kubectl create ns namespace1

   - Create MysqlCluster Custom Resource instance. It takes backups every minute.
     - kubectl create -f cluster1-secret.yaml
     - kubectl create -f backups-aws-secret.yaml
     - kubectl create -f cluster1.yaml

   - Wait until MysqlCluster pod is Ready - 4/4
     - kubectl get pods -n namespace1

   - Once MysqlCluster pods are ready, deploy Moodle
     - kubectl create -f moodle1.yaml

   - Wait till Moodle Pod is ready 1/1 (It will take about 5/6 minutes for Moodle Pod to become ready)
     - kubectl get pods -n namespace1

   - Login to Moodle Instance
       - Update /etc/hosts with <minikube ip or cluster node ip> moodle1. Example:
         - 192.168.99.100 moodle1
         - You can find minikube ip using: "minikube ip" command
         - If using Managed Kubernetes, find out the cluster node ip by refering to appropriate documentation
           from the provider.
         - Retrieve Moodle instance's admin password
	   - kubectl describe moodles moodle1 -n namespace1
             - Note down the secret name and Moodle instance URL
         - kubectl get secret moodle1 -n namespace1 -o jsonpath="{.data.adminPassword}" | base64 --decode
         - Navigate to the URL of moodle1 instance (available in the output of 'describe' command)
           - Login using 'admin' as username and password retrieved earlier from 'kubectl get secret' command
    - Check installed plugins
      - As part of creating moodle instance, we install the 'profilecohort' plugin.
        Check the custom resource specification moodle1.yaml to see this definition.
        - Once logged in to the Moodle instance, hit 'Site Administration'.
          This will show a message to update Moodle database for 'profilecohort' plugin.
        - Select that option to complete Plugin installation.
          You should see a 'success' message when the plugin is installed.
        - Hit the 'contine' button. This will take you to the main screen.
          Fill out the profile and then hit 'update profile'.
        - Then
          - Navigate to -> Administration -> Plugins -> Plugins Overview
          - You should see 'profilecohort' plugin in the 'Additional plugins' list
    - Create a new course
        - Go to Site home
        - Add a new course
        - Fill in the fields and
            Upload an image > Upload a file
        - Save and return

2) See the composition of Moodle instance, checking for deployment name, should be moodle1
    - kubectl get --raw "/apis/platform-as-code/v1/composition?kind=Moodle&instance=moodle1&namespace=namespace1" | python -mjson.tool

3) Add a label to the Moodle deployment
    - kubectl label -n namespace1 deployments moodle1 app=moodle-deploy

4) Add base64 encoded access keys to s3-secret.yaml
    Edit your keys in s3-secret.yaml

    for AWS_ACCESS_KEY_ID:
    - echo -n "your_access_key" | base64
    for AWS_SECRET_ACCESS_KEY:
    - echo -n "your_secret_access_code" | base64
    for RESTIC_PASSWORD:
    - echo -n "changeit" | base64

5) Apply AWS s3 secret
    - kubectl apply -f s3-secret.yaml

6) Start taking backups
    - kubectl apply -f restic-moodle.yaml

7. Wait until MysqlCluster pod is Ready - 2/2
    - kubectl get pods -n namespace1

8. You may Validate that it is taking backups (may take one minute)
    - aws s3 ls s3://stash-testing34/stash1/deployment/moodle1/


Recover a snapshot
-----------
1) cd ../moodle-recovery

2)  - Check available moodle backups, Pick one.
        - kubectl get snapshots -n namespace1 -l repository=deployment.moodle1
            Change recovery.yaml L10 to the snapshot you picked.
            - snapshot: deployment.moodle1-b3ae042b
    -  Check available mysqlCluster backups. Pick one
        - aws s3 ls s3://stash-testing34/mysql-backups/
            Change cluster2-recovered.yaml L9 to the mysqlbackup you picked:
            - initBucketURI: s3://stash-testing34/mysql-backups/cluster1-2019-04-09T19:56:01.xbackup.gz

3) Create PersistentVolumeClaim
    - kubectl create -f pvc.yaml

4) Create the Recovery, which stores the snapshot into that PersistentVolumeClaim.
    - kubectl create -f recovery.yaml

5) Create the MysqlCluster
    - kubectl create -f backups-aws-secret.yaml
    - kubectl create -f cluster2-secret.yaml
    - kubectl create -f cluster2-recovered.yaml

6) Recover the moodle instance with the backup volume
    - kubectl create -f moodle2-recovered.yaml

7) - Update /etc/hosts with <minikube ip or cluster node ip> moodle2. Example:
        - (minikube ip) moodle2

8) Visit moodle2:32001 (may take a few minutes)
    - Log in, and verify that all uploaded images are there!
    - Courses you added with an image should be there
    - Private files that students created should be there


Clean up
---------
1) Remove aws bucket
    - aws s3 rb s3://stash-testing34 --force
2) Delete everything
    - cd ../
    - kubectl delete moodle moodle1 -n namespace1
    - kubectl delete moodle moodle2 -n namespace1
    - kubectl delete -f moodle-backup/restic-moodle.yaml
    - kubectl delete -f moodle-backup/cluster1.yaml
    - kubectl delete -f moodle-recovery/cluster2-recovered.yaml
    - kubectl delete -f moodle-recovery/recovery.yaml
    - kubectl delete -f moodle-recovery/pvc.yaml
    - kubectl delete namespace namespace1
    - kubectl delete mysqlbackups.mysql.presslabs.org --all -n namespace1
    - kubectl delete secrets --all -n namespace1
    - kubectl delete secrets --all -n namespace2
    - helm list
        - find name to delete mysql operator, moodle operator and stash operator
    - helm delete _some_name_sql
    - helm delete _some_name_moodle
    - helm delete _some_name_stash
    - cd ../../
    - kubectl delete -f deploy
