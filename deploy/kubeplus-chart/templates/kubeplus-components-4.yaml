apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: resourceevents.workflows.kubeplus
spec:
  group: workflows.kubeplus
  version: v1alpha1
  names:
    kind: ResourceEvent
    plural: resourceevents
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: resourcemonitors.workflows.kubeplus
spec:
  group: workflows.kubeplus
  version: v1alpha1
  names:
    kind: ResourceMonitor
    plural: resourcemonitors
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: resourcecompositions.workflows.kubeplus
spec:
  group: workflows.kubeplus
  version: v1alpha1
  names:
    kind: ResourceComposition 
    plural: resourcecompositions 
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: resourcepolicies.workflows.kubeplus
spec:
  group: workflows.kubeplus
  version: v1alpha1
  names:
    kind: ResourcePolicy 
    plural: resourcepolicies 
  scope: Namespaced
---
apiVersion: v1
kind: Pod
metadata:
  name: kubeplus
  labels:
    app: kubeplus
spec:
  initContainers:
  - name: webhook-cert-setup
    # This is a minimal kubectl image based on Alpine Linux that signs certificates using the k8s extension api server
    image: gcr.io/cloudark-kubeplus/webhook-tls-getter:0.0.3
    imagePullPolicy: Always
    command: ["./webhook-create-signed-cert-new.sh"]
    args:
      - "--service"
      - "crd-hook-service"
      - "--namespace"
      - "default"
      - "--secret"
      - "webhook-tls-certificates"
  containers:
  - name: crd-hook
    image: gcr.io/cloudark-kubeplus/pac-mutating-admission-webhook:0.5.8
    imagePullPolicy: Always
    args:
      - -tlsCertFile=/etc/webhook/certs/cert.pem
      - -tlsKeyFile=/etc/webhook/certs/key.pem
      - -alsologtostderr
      #- -v=4
      - 2>&1
    volumeMounts:
    - name: webhook-certs
      mountPath: /etc/webhook/certs
      readOnly: true
  - name: mutating-webhook-helper
    image: lmecld/mutating-webhook-helper:latest
    imagePullPolicy: Always 
  #- name: discovery-server
  #  image: lmecld/kubediscovery:latest
  #  imagePullPolicy: Always 
  - name: platform-operator
    image: gcr.io/cloudark-kubeplus/platform-operator:0.0.9
    imagePullPolicy: Always
    command: [ "/platform-operator"]
  - name: helmer
    image: gcr.io/cloudark-kubeplus/helm-pod:0.0.7
    imagePullPolicy: Always
    command: ["/root/helm-pod"]
    volumeMounts:
    - mountPath: /chart
      name: chart-volume
  volumes:
    - name: chart-volume
      emptyDir: {}
    - name: webhook-certs
      secret:
        secretName: webhook-tls-certificates
---
kind: Service
apiVersion: v1
metadata:
  name: kubeplus
spec:
  selector:
    app: kubeplus
  type: NodePort
  ports:
  - protocol: TCP
    port: 90
    targetPort: 8090
---
kind: Service
apiVersion: v1
metadata:
  name: discovery-service
spec:
  selector:
    app: kubeplus 
  ports:
  - protocol: TCP 
    port: 80
    targetPort: 8080 
  type: ClusterIP 
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: platform-as-code.crd-binding
  labels:
    app: crd-hook
webhooks:
  - name: platform-as-code.crd-binding.v1
    clientConfig:
      service:
        name: crd-hook-service
        namespace: default
        path: "/mutate"
      caBundle: {{ .Values.caBundle }}
    rules:
      - operations: [ "CREATE","DELETE"]
        apiGroups: ["workflows.kubeplus", "apps", "extensions", "", "apiextensions.k8s.io" ]
        apiVersions: ["v1alpha1", "v1", "v1beta1"]
        resources: ["resourcepolicies", "deployments", "statefulsets", "replicasets", "daemonsets", "replicationcontrollers", "pods", "customresourcedefinitions","namespaces"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeplus:cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubeplus 
  namespace: default
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: kubeplus
  namespace: default 
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: webhook-reader
rules:
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: webhook-reader-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole #this must be Role or ClusterRole
  name: cluster-admin # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: crd-hook-service
  labels:
    app: crd-hook-service
spec:
  ports:
  - port: 443
    targetPort: 443
  selector:
    app: kubeplus
---
