/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/cloud-ark/kubeplus/platform-operator/pkg/apis/platformstackcontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PlatformStackLister helps list PlatformStacks.
type PlatformStackLister interface {
	// List lists all PlatformStacks in the indexer.
	List(selector labels.Selector) (ret []*v1.PlatformStack, err error)
	// PlatformStacks returns an object that can list and get PlatformStacks.
	PlatformStacks(namespace string) PlatformStackNamespaceLister
	PlatformStackListerExpansion
}

// platformStackLister implements the PlatformStackLister interface.
type platformStackLister struct {
	indexer cache.Indexer
}

// NewPlatformStackLister returns a new PlatformStackLister.
func NewPlatformStackLister(indexer cache.Indexer) PlatformStackLister {
	return &platformStackLister{indexer: indexer}
}

// List lists all PlatformStacks in the indexer.
func (s *platformStackLister) List(selector labels.Selector) (ret []*v1.PlatformStack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PlatformStack))
	})
	return ret, err
}

// PlatformStacks returns an object that can list and get PlatformStacks.
func (s *platformStackLister) PlatformStacks(namespace string) PlatformStackNamespaceLister {
	return platformStackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PlatformStackNamespaceLister helps list and get PlatformStacks.
type PlatformStackNamespaceLister interface {
	// List lists all PlatformStacks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PlatformStack, err error)
	// Get retrieves the PlatformStack from the indexer for a given namespace and name.
	Get(name string) (*v1.PlatformStack, error)
	PlatformStackNamespaceListerExpansion
}

// platformStackNamespaceLister implements the PlatformStackNamespaceLister
// interface.
type platformStackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PlatformStacks in the indexer for a given namespace.
func (s platformStackNamespaceLister) List(selector labels.Selector) (ret []*v1.PlatformStack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PlatformStack))
	})
	return ret, err
}

// Get retrieves the PlatformStack from the indexer for a given namespace and name.
func (s platformStackNamespaceLister) Get(name string) (*v1.PlatformStack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("platformstack"), name)
	}
	return obj.(*v1.PlatformStack), nil
}
