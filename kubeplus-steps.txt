Setup:
-------
- Install Minikube v0.25.0
  - curl -Lo minikube-0.25 https://storage.googleapis.com/minikube/releases/v0.25.0/minikube-linux-amd64
- Install Docker
- Install Golang 1.10.3
  - wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
  - sudo tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz
  - export PATH=$PATH:/usr/local/go/bin
- Install Golang dependency management tool (dep)
- Install Helm


Test:
-----

1. minikube-0.25 start

2. helm init

3. Deploy Kubeplus

- kubectl apply -f deploy
- kubectl get pods
  -> Verify that 4 containers have come up successfully


4. Create KubePlus Platform Stack consisting of Postgres Operator and MySQL Operator

- more paas.yaml
- kubectl create -f paas.yaml
- kubectl get operators

- kubectl describe operators postgres-operator
- kubectl describe customresourcedefinition postgreses.postgrescontroller.kubeplus
- kubectl get --raw "/apis/kubediscovery.cloudark.io/v1/explain?cr=Postgres"
  --> You should see OpenAPI Spec for Postgres custom resource as output

- kubectl describe operators mysql-operator-0.2.1
- kubectl describe customresourcedefinition mysqlclusters.mysql.oracle.com
- kubectl get --raw "/apis/kubediscovery.cloudark.io/v1/explain?cr=Cluster"
  --> You should see OpenAPI Spec for Cluster custom resource as output



5. Deploy application platform as Code containing Postgres custom resource
- more platform.yaml
  -> platform.yaml defines a Postgres instance. There are two users and a database defined.
     When verifying, use the the username, password, and database name specified in the Spec.
- kubectl create -f platform.yaml
- kubectl get postgreses
- kubectl describe postgreses postgres1
  -> Repeat this command till you see the 'Status' block in the output of postgres1 custom resource.
  -> It might take about a minute for the postgres1 custom resource to become READY.
  -> Once it is READY verify that the 'moodle' database was correctly created.
  -> The exact login command should be displayed as part of the 'Status' block.
     You will need Postgres's command-line tool 'psql' installed on your Host to run the verification command.
- kubectl get --raw "/apis/kubediscovery.cloudark.io/v1/describe?cr=Postgres&instance=postgres1" | python -mjson.tool
  --> You should see composition tree for postgres1 instance of Postgres custom resource

 






Development:
-------------

A] Start Minikube
- minikube-0.25 start
- eval $(minikube docker-env)
- GOSOURCE=<Directory of your GO Code>
- git clone https://github.com/cloud-ark/kubeplus 
- mkdir -p $GOSOURCE/github.com/cloud-ark
- mv kubeplus $GOSOURCE/github.com/cloud-ark/.
- git clone https://github.com/cloud-ark/kubediscovery
- mv kubediscovery $GOSOURCE/github.com/cloud-ark/.


B] Build KubePlus Docker Images
- ./buildall.sh
  -> This will build three Docker images: operator-manager, operator-deployer, kubediscovery
  -> It may take some time (5 to 10 minutes) depending on your network connection


C] Start Helm
- helm init


D] Deploy Kubeplus
- cd deploy
- mv rc.yaml rc.yaml.orig
- mv rc-minikube.yaml rc.yaml
- cd ..
- kubectl apply -f deploy
- kubectl get pods
  -> Verify that 4 containers have come up successfully


E] Create KubePlus Platform Stack consisting of Postgres Operator
- more postgres-operator.yaml
  -> Take a look at the Operator custom resource
- kubectl create -f postgres-operator.yaml
- kubectl get operators
- kubectl describe operators postgres-operator
- kubectl describe customresourcedefinition postgreses.postgrescontroller.kubeplus
- kubectl get --raw "/apis/kubediscovery.cloudark.io/v1/explain?cr=Postgres"
  --> You should see OpenAPI Spec for Postgres custom resource as output


F] Deploy application platform as Code containing Postgres custom resource
- more platform.yaml
  -> platform.yaml defines a Postgres instance. There are two users and a database defined.
     When verifying, use the the username, password, and database name specified in the Spec.
- kubectl create -f platform.yaml
- kubectl get postgreses
- kubectl describe postgreses postgres1
  -> Repeat this command till you see the 'Status' block in the output of postgres1 custom resource.
  -> It might take about a minute for the postgres1 custom resource to become READY.
  -> Once it is READY verify that the 'moodle' database was correctly created.
  -> The exact login command should be displayed as part of the 'Status' block.
     You will need Postgres's command-line tool 'psql' installed on your Host to run the verification command.
- kubectl get --raw "/apis/kubediscovery.cloudark.io/v1/describe?cr=Postgres&instance=postgres1" | python -mjson.tool
  --> You should see composition tree for postgres1 instance of Postgres custom resource


Cleanup:
---------
- cd postgres-crd-v2
- ./deletecrds.sh postgres1
- cd ..
- ./deletestuff.sh
- kubectl delete -f deploy


Troubleshooting:
-----------------
- kubectl logs <postgres-operator pod>
- kubectl logs <kubeplus pod> -c <container-name>


